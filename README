README

Student : Gogea Mihail

Grafica Simularea Apei
Timp rezolvare proiect : 12 ore

Codul pentru acest proiect se regaseste in Laboratoare/Laborator8/Laborator8.cpp + directorul Shader

Mentionez ca proiectul a fost lucrat in directorul numit Laboratoare/Laborator8/ (.cpp,Shader).

Pe ecran este sursa lumini, o sfera galbena care emana lumina , pe langa aceasta mai este si o sfera ca apasand tasta SPACE arunca o picatura de apa. Lumina se poate deplasa cu sagetile , iar pentru a se deplasa in sus se apasa tasta M iar pentru jos tasta N. Pentru a se deplasa sfera care arunca picaturi de apa , se apasa tastele w , a, s, d. Pentru a se active modul slow-motion se apasa tasta T, iar urmand a dezactiva se va mai apasa inca odata tasta T. Pentru deplasarea cu camera FPS se va apasa click dreapta, apoi w, a , s, d.
Arhiva contine urmatoarele fisiere din folderul /Source/Laboratoare/Laborator8/ care sunt importante jocului:
- LabCamera.h
- Laborator8.cpp
- Laborator8.h
- Shaders
-FragmentShader
-VertexShader

Detalii de implementare : Voi face o descriere pentru fiecare fisier in care am scris .
Unele detali sunt prezentate si in comentarile surselor.
In LabCamera.h este scris de la laborator , pentru miscarile camerei care am implementat.
In VertexShader.glsl am implementat miscarea cordonatei Y a plasei , prin formula atasata in enuntul temei. Am calculat fiecare varf, urmand apoi sa calculez normalele, apoi normala principala .
In FragmentShader.glsl am implementat luminarea asa cum a fost ceruta in cursul laboratorului nr. 8 .
In Laborator8.cpp este scrisa majoritatea tema . Aici am creat o Clasa numita Bila care retine propietatile picaturi de apa. Am creat 3 bile pentru efectul bouncing.
In functia Init , am creat apa (plansa) 200 x 200 , am initializat camera si toate variabilele/pozitile la inceputul jocului.
In functia Update in functie de efect cresc timpul , urmand apoi sa desenez toate obiectele pe ecran , iar in cazul picaturilor de apa vor aparea atunci cand una isi va face traiectoria urmand sa apara cealalta, facand un bouncing-efect. In functia RenderSimpleMesh am trimis toate variabilele ce imi trebuiesc in Shadere pentru a calcula lumina si miscarea punctelor.
In functile urmatoare am implementat pentru fiecare tasta , miscarea obiectelor de pe ecran.
Pentru mai multe detalii de implementare a se vedea codul , deoarece am scris comentarii amanuntite pentru linile de cod mai complicate si pentru fiecare variabila declarata .


5.Continutul arhivei
Arhiva contine proiectul ce contine toate folderele din Framework si un fisier README in format PDF si format word.docx in functie de dorinta corectorului de a deschide.
